node( 'master' ) {
    ws( "D:/Jenkins_UnrealEngine" ) {
        properties([
            parameters([
                string( name: "OVERRIDE_OUTPUT_DIRECTORY", defaultValue: 'D:/UE4_JenkinsOutput', trim: true ),
                string( name: "ARCHIVE_DIRECTORY", defaultValue: 'V:/UE4', trim: true ),
                booleanParam( name : "SYNC_ONLY", defaultValue: false ),
                booleanParam( name : "CLEAN_OUTPUT_DIR", defaultValue: false ),
                booleanParam( name : "GIT_CLEAN", defaultValue: false ),
                booleanParam( name : "GIT_CHECKOUT", defaultValue: false ),
                booleanParam( name : "BUILD", defaultValue: true ),
                booleanParam( name : "ZIP_OUTPUT", defaultValue: true ),
                booleanParam( name : "ARCHIVE_OUTPUT", defaultValue: true ),
                booleanParam( name : "SYNC_SLAVES", defaultValue: true )
            ]),
            disableConcurrentBuilds(),
            buildDiscarder( logRotator( numToKeepStr: '1' ) )
        ])

        slackSend channel: 'jenkins', color: 'good', message: "Build started : #${env.BUILD_NUMBER} - ${env.JOB_NAME} (<${env.BUILD_URL}|Open>)"

        try { 
            if ( !params.SYNC_ONLY ) {
                if ( params.CLEAN_OUTPUT_DIR ) {
                    stage( 'Clean Output' ) {
                        bat "rm -rf ${params.OVERRIDE_OUTPUT_DIRECTORY}/*"
                    }
                }
                if ( params.GIT_CLEAN ) {
                    stage( 'Clean GIT' ) {
                        bat "git clean -fdx"
                    }
                }
                stage( 'Git checkout' ) {
                    git branch: '', credentialsId: '', url: 'git@github.com:XXX/UnrealEngine.git'
                }
                if ( params.BUILD ) {
                    stage( 'Build' ) {
                        bat getBuildGraphCommandLine()
                    }
                }
                if ( params.ZIP_OUTPUT ) {
                    stage( 'Zip' ) {
                        bat "jar -cMf ${params.OVERRIDE_OUTPUT_DIRECTORY}/UE4.zip ${params.OVERRIDE_OUTPUT_DIRECTORY}"
                    }
                }
                if ( params.ARCHIVE_OUTPUT ) {
                    stage( 'Deploy' ) {
                        if ( params.ZIP_OUTPUT ) {
                            bat "cp ${params.OVERRIDE_OUTPUT_DIRECTORY}/UE4.zip ${params.ARCHIVE_DIRECTORY}"
                        } else {
                            bat "cp -r ${params.OVERRIDE_OUTPUT_DIRECTORY} ${params.ARCHIVE_DIRECTORY}"
                        }
                    }
                }
            }

            if ( params.SYNC_ONLY || params.SYNC_SLAVES ) {
                // See UE4Engine_SyncSlaves jenkins file for the setup of the following job
                stage ( 'Sync Nodes' ) {
                    build job: 'UE4_SyncSlaves', wait: false
                }
            }

            slackSend channel: 'jenkins', color: 'good', message: "Successfully processed : #${env.BUILD_NUMBER} - ${env.JOB_NAME} (<${env.BUILD_URL}|Open>)"
        } catch ( Exception err ) {
            slackSend channel: 'jenkins', color: 'danger', message: "Failed to process : #${env.BUILD_NUMBER} - ${env.JOB_NAME} (<${env.BUILD_URL}|Open>)"
            currentBuild.result = "FAILURE"
        }
    }
}

def getBuildGraphCommandLine() {
    String result = "${WORKSPACE}/Engine/Build/BatchFiles/RunUAT.bat BuildGraph -target=\"Make Installed Build Win64\" -NoXGE "    
    result += getOptionsArguments()
    result += " -set:OutputDirectoryOverride=${params.OVERRIDE_OUTPUT_DIRECTORY}"
    result += " -script=\"${WORKSPACE}/Engine/Build/InstalledEngineBuild.xml\""

    return result
}

def getOptionsArguments() {
    String result = ""

    def map = [
        "DDC":false,
        "FeaturePacks":false,
        "Win64":true,
        "PS4":true,
        "Switch":true,
        "XboxOne":true,
        "TVOS":false,
        "Linux":false,
        "IOS":false,
        "Android":false,
        "Mac":false,
        "HTML5":false,
        "Win32":false
    ]
    
    map.each { key, value ->
        result += " -set:With${key}=${value}"
    }

    return result
}
